Upper Camel Case ==> Pascal Case 
La primera letra de cada palabra en mayúsculas, e.g. House, BankAccount.

Definir clases en python2:
class <className>(object):

Definir clases en python3:
class <className>:

Ejemplos de clases:

Small Bank:
Bankcashier, Client, Transaction 
Donut Shop:
Manager,Client, Product
Videogame Store:
Videogame, Client, Manager

En las clases se define estados y comportamiento

Ventajas de POO:
- Modularidad (crear modulos/objetos separados)
- Reusabilidad (los objetos se pueden reusar)
- Extensabilidad (añadir más funcionalidad )

Clase: (es reusable)
Es un plano (blueprint) que se usa para crear objetos:
Definimos el state / behavior of an object.
Hay que diseñar la clase. 
Hay que definir los atributos y el comportamiento de la clase.

Upper Camel Case  ==> Pascal Case:
BankAccount.

-------------------
Problem Statement
-------------------
Se buscan clases potenciales en los sustantivos

Classes act like blueprints to create instances

Create instances/object base on classes:
Instance: Is an object created from the class.
Class es un molde
Instance es un objeto creado en base a la clase. Puede tener diferentes atributos:
color, size, weight, ...
Instances atributes are independents
Class Naming Convention: Pascal Case ==> Upper Camel Case (e.g. HouseKeeper)

Class definition: Is the implementation of the class in an specific language
    Class Header:
    class <ClassName>:


Body of the class: Contains the elements of the blueprints, including 
the attributes and behavior of the class: Elements:
    Class attributes
    __init__() : special method used to define initial state of an object
               : called automatically when the instance is created.
    Methods

Instances and Instances atributes.
Instances is an object created by the class.
Instances have attributes and this attributes are called instances atributes.
Player:
    sprite
    score
    number of lives
Instance attributes are independents
snake_case format (back_account)

def __init__(self): #permite definir los atributos de la instancia
self: is a generic way of referring to the current instance of the class that is been creating

Access an instance attributes
Access instance attributes inside the class:
self.<attributes>

__init__() permite definir los atributos de la instancia
self ==> referencia a la instancia que esta siendo creada

class attributes:
Is an attribute of the class. It belongs to the class, not to a particular instance.
Any change of any class attributes affects all instances.


TODO: Lección número 48




