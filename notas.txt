Upper Camel Case ==> Pascal Case 
La primera letra de cada palabra en mayúsculas, e.g. House, BankAccount.

Definir clases en python2:
class <className>(object):

Definir clases en python3:
class <className>:

Ejemplos de clases:

Small Bank:
Bankcashier, Client, Transaction 
Donut Shop:
Manager,Client, Product
Videogame Store:
Videogame, Client, Manager

En las clases se define estados y comportamiento

Ventajas de POO:
- Modularidad (crear modulos/objetos separados)
- Reusabilidad (los objetos se pueden reusar)
- Extensabilidad (añadir más funcionalidad )

Clase: (es reusable)
Es un plano (blueprint) que se usa para crear objetos:
Definimos el state / behavior of an object.
Hay que diseñar la clase. 
Hay que definir los atributos y el comportamiento de la clase.

Upper Camel Case  ==> Pascal Case:
BankAccount.

-------------------
Problem Statement
-------------------
Se buscan clases potenciales en los sustantivos

Classes act like blueprints to create instances

Create instances/object base on classes:
Instance: Is an object created from the class.
Class es un molde
Instance es un objeto creado en base a la clase. Puede tener diferentes atributos:
color, size, weight, ...
Instances atributes are independents
Class Naming Convention: Pascal Case ==> Upper Camel Case (e.g. HouseKeeper)

Class definition: Is the implementation of the class in an specific language
    Class Header:
    class <ClassName>:


Body of the class: Contains the elements of the blueprints, including 
the attributes and behavior of the class: Elements:
    Class attributes
    __init__() : special method used to define initial state of an object
               : called automatically when the instance is created.
    Methods

Instances and Instances atributes.
Instances is an object created by the class.
Instances have attributes and this attributes are called instances atributes.
Player:
    sprite
    score
    number of lives
Instance attributes are independents
snake_case format (back_account)

def __init__(self): #permite definir los atributos de la instancia
self: is a generic way of referring to the current instance of the class that is been creating

Access an instance attributes
Access instance attributes inside the class:
self.<attributes>

__init__() permite definir los atributos de la instancia
self ==> referencia a la instancia que esta siendo creada

class attributes:
Is an attribute of the class. It belongs to the class, not to a particular instance.
Any change of any class attributes affects all instances.

#######################
### Abstraction
#######################
Hide the complexity from the user.
Allow us to abstract out common parts of the code to avoid repetition. (Reusable)
We can avoid code repetition

Class: 
 - Interface : External(steering wheel)
 - Implementacion: Internal (engineen)


#######################
### Encapsulation
#######################
Bundling of data and methods that act on that data into a single unit (class)
Objective: Prevent direct access to the attributes in order to avoid making
potentially problematic changes to the state
Public or not public (getters + setter)

Attributes :
    Public: An attribute that can be accessed and modified 
    directly without access restrictions
    
    Non Public: Naming
        By Convention: _<attribute>

        Changing Name: __<attribute> (only for special conventions): Naming mangling
        The term private is not used because there is not really a private attribute in Python

    (No attribute is ever really private in Python. They can still be accessed outside of the class, 
    but according to the conventions, you shouldn't.)

    --===================================================================--
    Name Mangling: Process by which the name of the attribute is modified
    --===================================================================--
    __spam              ==> _ClassName__spam
    __engine_serial_num ==> _Car__engine_serial_num

    It should be used only for special cases

############################################################
## Getters and Setters and Properties
############################################################
Methods are like functions associated to a specific object or class
Getters and setters are methods that let us get and set the value of
an instance attribute.

Getters: Get the value of an instance attribute
Setters: Set the value of an instance attribute. We can use it to validate the new value

get_+<attribute>
get_name; get_color, etc.

<object>.get_<attribute>()

set_+<attribute>
set_name; set_color, etc.

<object>.set_<attribute>()

########################################################################
## Properties is a better way to set and get values to a class
########################################################################

property(<getter>, <setter>)
The getters and the setters will be called behind the scenes for their
corresponding operation
########################################################################
##@property
########################################################################

Decorator: A function that takes a function and extends its behavior
without explicitly modifying it.

We will reuse the name of the property.
########################################################################

@property
def property_name(self):
    return self._property_name


TODO:
Section 8. 78
########################################################################







